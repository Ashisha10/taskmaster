name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-1                          # Set this to your AWS region
  ECR_REPOSITORY: taskmaster-repo-prod           # Set this to your Amazon ECR repository name for production
  ECS_SERVICE: taskmaster-cluster-prod-prod-service  # Set this to your Amazon ECS service name for production
  ECS_CLUSTER: taskmaster-cluster-prod           # Set this to your ECS cluster name for production
  CONTAINER_NAME: taskmaster-container-prod      # Set this to the name of the container in the containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}  # Use the commit SHA as the image tag
      run: |
        # Hardcoded ECR registry and repository details for production
        ECR_REGISTRY="241533153259.dkr.ecr.us-west-1.amazonaws.com"
        ECR_REPOSITORY="taskmaster-repo-prod"
    
        # Build the Docker image
        docker buildx build --platform linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .
    
        # Tag the image for ECR
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
        # Push the image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
        # Echo the image tag to GitHub Actions output
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Render ECS task definition with the new image
      id: task-def
      run: |
        cat <<EOL > ecs-task-definition.json
        {
          "family": "taskmaster-task-prod",
          "executionRoleArn": "arn:aws:iam::241533153259:role/ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::241533153259:role/ecs-task-role",
          "networkMode": "awsvpc",
          "requiresCompatibilities": [
            "FARGATE"
          ],
          "memory": "512",
          "cpu": "256",
          "containerDefinitions": [
            {
              "name": "taskmaster-container-prod",
              "image": "${{ steps.build-image.outputs.image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8080,
                  "hostPort": 8080,
                  "protocol": "tcp"
                }
              ]
            }
          ]
        }
        EOL

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://ecs-task-definition.json

    - name: Deploy ECS service with new task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
